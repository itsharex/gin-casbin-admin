// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wxlbd/gin-casbin-admin/internal/model"
)

func newUserRoles(db *gorm.DB, opts ...gen.DOOption) userRoles {
	_userRoles := userRoles{}

	_userRoles.userRolesDo.UseDB(db, opts...)
	_userRoles.userRolesDo.UseModel(&model.UserRoles{})

	tableName := _userRoles.userRolesDo.TableName()
	_userRoles.ALL = field.NewAsterisk(tableName)
	_userRoles.ID = field.NewUint64(tableName, "id")
	_userRoles.UserID = field.NewUint64(tableName, "user_id")
	_userRoles.RoleID = field.NewUint64(tableName, "role_id")

	_userRoles.fillFieldMap()

	return _userRoles
}

type userRoles struct {
	userRolesDo

	ALL    field.Asterisk
	ID     field.Uint64
	UserID field.Uint64
	RoleID field.Uint64

	fieldMap map[string]field.Expr
}

func (u userRoles) Table(newTableName string) *userRoles {
	u.userRolesDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userRoles) As(alias string) *userRoles {
	u.userRolesDo.DO = *(u.userRolesDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userRoles) updateTableName(table string) *userRoles {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewUint64(table, "id")
	u.UserID = field.NewUint64(table, "user_id")
	u.RoleID = field.NewUint64(table, "role_id")

	u.fillFieldMap()

	return u
}

func (u *userRoles) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userRoles) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 3)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["role_id"] = u.RoleID
}

func (u userRoles) clone(db *gorm.DB) userRoles {
	u.userRolesDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userRoles) replaceDB(db *gorm.DB) userRoles {
	u.userRolesDo.ReplaceDB(db)
	return u
}

type userRolesDo struct{ gen.DO }

type IUserRolesDo interface {
	gen.SubQuery
	Debug() IUserRolesDo
	WithContext(ctx context.Context) IUserRolesDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserRolesDo
	WriteDB() IUserRolesDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserRolesDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserRolesDo
	Not(conds ...gen.Condition) IUserRolesDo
	Or(conds ...gen.Condition) IUserRolesDo
	Select(conds ...field.Expr) IUserRolesDo
	Where(conds ...gen.Condition) IUserRolesDo
	Order(conds ...field.Expr) IUserRolesDo
	Distinct(cols ...field.Expr) IUserRolesDo
	Omit(cols ...field.Expr) IUserRolesDo
	Join(table schema.Tabler, on ...field.Expr) IUserRolesDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserRolesDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserRolesDo
	Group(cols ...field.Expr) IUserRolesDo
	Having(conds ...gen.Condition) IUserRolesDo
	Limit(limit int) IUserRolesDo
	Offset(offset int) IUserRolesDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRolesDo
	Unscoped() IUserRolesDo
	Create(values ...*model.UserRoles) error
	CreateInBatches(values []*model.UserRoles, batchSize int) error
	Save(values ...*model.UserRoles) error
	First() (*model.UserRoles, error)
	Take() (*model.UserRoles, error)
	Last() (*model.UserRoles, error)
	Find() ([]*model.UserRoles, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoles, err error)
	FindInBatches(result *[]*model.UserRoles, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserRoles) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserRolesDo
	Assign(attrs ...field.AssignExpr) IUserRolesDo
	Joins(fields ...field.RelationField) IUserRolesDo
	Preload(fields ...field.RelationField) IUserRolesDo
	FirstOrInit() (*model.UserRoles, error)
	FirstOrCreate() (*model.UserRoles, error)
	FindByPage(offset int, limit int) (result []*model.UserRoles, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserRolesDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userRolesDo) Debug() IUserRolesDo {
	return u.withDO(u.DO.Debug())
}

func (u userRolesDo) WithContext(ctx context.Context) IUserRolesDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userRolesDo) ReadDB() IUserRolesDo {
	return u.Clauses(dbresolver.Read)
}

func (u userRolesDo) WriteDB() IUserRolesDo {
	return u.Clauses(dbresolver.Write)
}

func (u userRolesDo) Session(config *gorm.Session) IUserRolesDo {
	return u.withDO(u.DO.Session(config))
}

func (u userRolesDo) Clauses(conds ...clause.Expression) IUserRolesDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userRolesDo) Returning(value interface{}, columns ...string) IUserRolesDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userRolesDo) Not(conds ...gen.Condition) IUserRolesDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userRolesDo) Or(conds ...gen.Condition) IUserRolesDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userRolesDo) Select(conds ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userRolesDo) Where(conds ...gen.Condition) IUserRolesDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userRolesDo) Order(conds ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userRolesDo) Distinct(cols ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userRolesDo) Omit(cols ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userRolesDo) Join(table schema.Tabler, on ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userRolesDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userRolesDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userRolesDo) Group(cols ...field.Expr) IUserRolesDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userRolesDo) Having(conds ...gen.Condition) IUserRolesDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userRolesDo) Limit(limit int) IUserRolesDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userRolesDo) Offset(offset int) IUserRolesDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userRolesDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserRolesDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userRolesDo) Unscoped() IUserRolesDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userRolesDo) Create(values ...*model.UserRoles) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userRolesDo) CreateInBatches(values []*model.UserRoles, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userRolesDo) Save(values ...*model.UserRoles) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userRolesDo) First() (*model.UserRoles, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoles), nil
	}
}

func (u userRolesDo) Take() (*model.UserRoles, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoles), nil
	}
}

func (u userRolesDo) Last() (*model.UserRoles, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoles), nil
	}
}

func (u userRolesDo) Find() ([]*model.UserRoles, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserRoles), err
}

func (u userRolesDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserRoles, err error) {
	buf := make([]*model.UserRoles, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userRolesDo) FindInBatches(result *[]*model.UserRoles, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userRolesDo) Attrs(attrs ...field.AssignExpr) IUserRolesDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userRolesDo) Assign(attrs ...field.AssignExpr) IUserRolesDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userRolesDo) Joins(fields ...field.RelationField) IUserRolesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userRolesDo) Preload(fields ...field.RelationField) IUserRolesDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userRolesDo) FirstOrInit() (*model.UserRoles, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoles), nil
	}
}

func (u userRolesDo) FirstOrCreate() (*model.UserRoles, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserRoles), nil
	}
}

func (u userRolesDo) FindByPage(offset int, limit int) (result []*model.UserRoles, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userRolesDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userRolesDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userRolesDo) Delete(models ...*model.UserRoles) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userRolesDo) withDO(do gen.Dao) *userRolesDo {
	u.DO = *do.(*gen.DO)
	return u
}
