// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wxlbd/gin-casbin-admin/internal/model"
)

func newDictDatum(db *gorm.DB, opts ...gen.DOOption) dictDatum {
	_dictDatum := dictDatum{}

	_dictDatum.dictDatumDo.UseDB(db, opts...)
	_dictDatum.dictDatumDo.UseModel(&model.DictDatum{})

	tableName := _dictDatum.dictDatumDo.TableName()
	_dictDatum.ALL = field.NewAsterisk(tableName)
	_dictDatum.ID = field.NewInt64(tableName, "id")
	_dictDatum.TypeCode = field.NewString(tableName, "type_code")
	_dictDatum.Label = field.NewString(tableName, "label")
	_dictDatum.Value = field.NewString(tableName, "value")
	_dictDatum.Status = field.NewInt32(tableName, "status")
	_dictDatum.Sort = field.NewInt32(tableName, "sort")
	_dictDatum.Remark = field.NewString(tableName, "remark")
	_dictDatum.CreatedAt = field.NewTime(tableName, "created_at")
	_dictDatum.UpdatedAt = field.NewTime(tableName, "updated_at")
	_dictDatum.DeletedAt = field.NewInt32(tableName, "deleted_at")

	_dictDatum.fillFieldMap()

	return _dictDatum
}

type dictDatum struct {
	dictDatumDo

	ALL       field.Asterisk
	ID        field.Int64
	TypeCode  field.String
	Label     field.String
	Value     field.String
	Status    field.Int32
	Sort      field.Int32
	Remark    field.String
	CreatedAt field.Time
	UpdatedAt field.Time
	DeletedAt field.Int32

	fieldMap map[string]field.Expr
}

func (d dictDatum) Table(newTableName string) *dictDatum {
	d.dictDatumDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dictDatum) As(alias string) *dictDatum {
	d.dictDatumDo.DO = *(d.dictDatumDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dictDatum) updateTableName(table string) *dictDatum {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.TypeCode = field.NewString(table, "type_code")
	d.Label = field.NewString(table, "label")
	d.Value = field.NewString(table, "value")
	d.Status = field.NewInt32(table, "status")
	d.Sort = field.NewInt32(table, "sort")
	d.Remark = field.NewString(table, "remark")
	d.CreatedAt = field.NewTime(table, "created_at")
	d.UpdatedAt = field.NewTime(table, "updated_at")
	d.DeletedAt = field.NewInt32(table, "deleted_at")

	d.fillFieldMap()

	return d
}

func (d *dictDatum) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dictDatum) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 10)
	d.fieldMap["id"] = d.ID
	d.fieldMap["type_code"] = d.TypeCode
	d.fieldMap["label"] = d.Label
	d.fieldMap["value"] = d.Value
	d.fieldMap["status"] = d.Status
	d.fieldMap["sort"] = d.Sort
	d.fieldMap["remark"] = d.Remark
	d.fieldMap["created_at"] = d.CreatedAt
	d.fieldMap["updated_at"] = d.UpdatedAt
	d.fieldMap["deleted_at"] = d.DeletedAt
}

func (d dictDatum) clone(db *gorm.DB) dictDatum {
	d.dictDatumDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dictDatum) replaceDB(db *gorm.DB) dictDatum {
	d.dictDatumDo.ReplaceDB(db)
	return d
}

type dictDatumDo struct{ gen.DO }

type IDictDatumDo interface {
	gen.SubQuery
	Debug() IDictDatumDo
	WithContext(ctx context.Context) IDictDatumDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDictDatumDo
	WriteDB() IDictDatumDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDictDatumDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDictDatumDo
	Not(conds ...gen.Condition) IDictDatumDo
	Or(conds ...gen.Condition) IDictDatumDo
	Select(conds ...field.Expr) IDictDatumDo
	Where(conds ...gen.Condition) IDictDatumDo
	Order(conds ...field.Expr) IDictDatumDo
	Distinct(cols ...field.Expr) IDictDatumDo
	Omit(cols ...field.Expr) IDictDatumDo
	Join(table schema.Tabler, on ...field.Expr) IDictDatumDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDictDatumDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDictDatumDo
	Group(cols ...field.Expr) IDictDatumDo
	Having(conds ...gen.Condition) IDictDatumDo
	Limit(limit int) IDictDatumDo
	Offset(offset int) IDictDatumDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDictDatumDo
	Unscoped() IDictDatumDo
	Create(values ...*model.DictDatum) error
	CreateInBatches(values []*model.DictDatum, batchSize int) error
	Save(values ...*model.DictDatum) error
	First() (*model.DictDatum, error)
	Take() (*model.DictDatum, error)
	Last() (*model.DictDatum, error)
	Find() ([]*model.DictDatum, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictDatum, err error)
	FindInBatches(result *[]*model.DictDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DictDatum) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDictDatumDo
	Assign(attrs ...field.AssignExpr) IDictDatumDo
	Joins(fields ...field.RelationField) IDictDatumDo
	Preload(fields ...field.RelationField) IDictDatumDo
	FirstOrInit() (*model.DictDatum, error)
	FirstOrCreate() (*model.DictDatum, error)
	FindByPage(offset int, limit int) (result []*model.DictDatum, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDictDatumDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dictDatumDo) Debug() IDictDatumDo {
	return d.withDO(d.DO.Debug())
}

func (d dictDatumDo) WithContext(ctx context.Context) IDictDatumDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dictDatumDo) ReadDB() IDictDatumDo {
	return d.Clauses(dbresolver.Read)
}

func (d dictDatumDo) WriteDB() IDictDatumDo {
	return d.Clauses(dbresolver.Write)
}

func (d dictDatumDo) Session(config *gorm.Session) IDictDatumDo {
	return d.withDO(d.DO.Session(config))
}

func (d dictDatumDo) Clauses(conds ...clause.Expression) IDictDatumDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dictDatumDo) Returning(value interface{}, columns ...string) IDictDatumDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dictDatumDo) Not(conds ...gen.Condition) IDictDatumDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dictDatumDo) Or(conds ...gen.Condition) IDictDatumDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dictDatumDo) Select(conds ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dictDatumDo) Where(conds ...gen.Condition) IDictDatumDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dictDatumDo) Order(conds ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dictDatumDo) Distinct(cols ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dictDatumDo) Omit(cols ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dictDatumDo) Join(table schema.Tabler, on ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dictDatumDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dictDatumDo) RightJoin(table schema.Tabler, on ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dictDatumDo) Group(cols ...field.Expr) IDictDatumDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dictDatumDo) Having(conds ...gen.Condition) IDictDatumDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dictDatumDo) Limit(limit int) IDictDatumDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dictDatumDo) Offset(offset int) IDictDatumDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dictDatumDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDictDatumDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dictDatumDo) Unscoped() IDictDatumDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dictDatumDo) Create(values ...*model.DictDatum) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dictDatumDo) CreateInBatches(values []*model.DictDatum, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dictDatumDo) Save(values ...*model.DictDatum) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dictDatumDo) First() (*model.DictDatum, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictDatum), nil
	}
}

func (d dictDatumDo) Take() (*model.DictDatum, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictDatum), nil
	}
}

func (d dictDatumDo) Last() (*model.DictDatum, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictDatum), nil
	}
}

func (d dictDatumDo) Find() ([]*model.DictDatum, error) {
	result, err := d.DO.Find()
	return result.([]*model.DictDatum), err
}

func (d dictDatumDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DictDatum, err error) {
	buf := make([]*model.DictDatum, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dictDatumDo) FindInBatches(result *[]*model.DictDatum, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dictDatumDo) Attrs(attrs ...field.AssignExpr) IDictDatumDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dictDatumDo) Assign(attrs ...field.AssignExpr) IDictDatumDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dictDatumDo) Joins(fields ...field.RelationField) IDictDatumDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dictDatumDo) Preload(fields ...field.RelationField) IDictDatumDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dictDatumDo) FirstOrInit() (*model.DictDatum, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictDatum), nil
	}
}

func (d dictDatumDo) FirstOrCreate() (*model.DictDatum, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DictDatum), nil
	}
}

func (d dictDatumDo) FindByPage(offset int, limit int) (result []*model.DictDatum, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dictDatumDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dictDatumDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dictDatumDo) Delete(models ...*model.DictDatum) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dictDatumDo) withDO(do gen.Dao) *dictDatumDo {
	d.DO = *do.(*gen.DO)
	return d
}
