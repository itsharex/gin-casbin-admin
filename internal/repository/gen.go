// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q         = new(Query)
	DictDatum *dictDatum
	DictType  *dictType
	Menu      *menu
	Role      *role
	RoleMenus *roleMenus
	User      *user
	UserRoles *userRoles
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DictDatum = &Q.DictDatum
	DictType = &Q.DictType
	Menu = &Q.Menu
	Role = &Q.Role
	RoleMenus = &Q.RoleMenus
	User = &Q.User
	UserRoles = &Q.UserRoles
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:        db,
		DictDatum: newDictDatum(db, opts...),
		DictType:  newDictType(db, opts...),
		Menu:      newMenu(db, opts...),
		Role:      newRole(db, opts...),
		RoleMenus: newRoleMenus(db, opts...),
		User:      newUser(db, opts...),
		UserRoles: newUserRoles(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DictDatum dictDatum
	DictType  dictType
	Menu      menu
	Role      role
	RoleMenus roleMenus
	User      user
	UserRoles userRoles
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		DictDatum: q.DictDatum.clone(db),
		DictType:  q.DictType.clone(db),
		Menu:      q.Menu.clone(db),
		Role:      q.Role.clone(db),
		RoleMenus: q.RoleMenus.clone(db),
		User:      q.User.clone(db),
		UserRoles: q.UserRoles.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:        db,
		DictDatum: q.DictDatum.replaceDB(db),
		DictType:  q.DictType.replaceDB(db),
		Menu:      q.Menu.replaceDB(db),
		Role:      q.Role.replaceDB(db),
		RoleMenus: q.RoleMenus.replaceDB(db),
		User:      q.User.replaceDB(db),
		UserRoles: q.UserRoles.replaceDB(db),
	}
}

type queryCtx struct {
	DictDatum IDictDatumDo
	DictType  IDictTypeDo
	Menu      IMenuDo
	Role      IRoleDo
	RoleMenus IRoleMenusDo
	User      IUserDo
	UserRoles IUserRolesDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DictDatum: q.DictDatum.WithContext(ctx),
		DictType:  q.DictType.WithContext(ctx),
		Menu:      q.Menu.WithContext(ctx),
		Role:      q.Role.WithContext(ctx),
		RoleMenus: q.RoleMenus.WithContext(ctx),
		User:      q.User.WithContext(ctx),
		UserRoles: q.UserRoles.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
