// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repository

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/wxlbd/gin-casbin-admin/internal/model"
)

func newRoleMenus(db *gorm.DB, opts ...gen.DOOption) roleMenus {
	_roleMenus := roleMenus{}

	_roleMenus.roleMenusDo.UseDB(db, opts...)
	_roleMenus.roleMenusDo.UseModel(&model.RoleMenus{})

	tableName := _roleMenus.roleMenusDo.TableName()
	_roleMenus.ALL = field.NewAsterisk(tableName)
	_roleMenus.ID = field.NewUint64(tableName, "id")
	_roleMenus.RoleID = field.NewUint64(tableName, "role_id")
	_roleMenus.MenuID = field.NewUint64(tableName, "menu_id")

	_roleMenus.fillFieldMap()

	return _roleMenus
}

type roleMenus struct {
	roleMenusDo

	ALL    field.Asterisk
	ID     field.Uint64
	RoleID field.Uint64
	MenuID field.Uint64

	fieldMap map[string]field.Expr
}

func (r roleMenus) Table(newTableName string) *roleMenus {
	r.roleMenusDo.UseTable(newTableName)
	return r.updateTableName(newTableName)
}

func (r roleMenus) As(alias string) *roleMenus {
	r.roleMenusDo.DO = *(r.roleMenusDo.As(alias).(*gen.DO))
	return r.updateTableName(alias)
}

func (r *roleMenus) updateTableName(table string) *roleMenus {
	r.ALL = field.NewAsterisk(table)
	r.ID = field.NewUint64(table, "id")
	r.RoleID = field.NewUint64(table, "role_id")
	r.MenuID = field.NewUint64(table, "menu_id")

	r.fillFieldMap()

	return r
}

func (r *roleMenus) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := r.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (r *roleMenus) fillFieldMap() {
	r.fieldMap = make(map[string]field.Expr, 3)
	r.fieldMap["id"] = r.ID
	r.fieldMap["role_id"] = r.RoleID
	r.fieldMap["menu_id"] = r.MenuID
}

func (r roleMenus) clone(db *gorm.DB) roleMenus {
	r.roleMenusDo.ReplaceConnPool(db.Statement.ConnPool)
	return r
}

func (r roleMenus) replaceDB(db *gorm.DB) roleMenus {
	r.roleMenusDo.ReplaceDB(db)
	return r
}

type roleMenusDo struct{ gen.DO }

type IRoleMenusDo interface {
	gen.SubQuery
	Debug() IRoleMenusDo
	WithContext(ctx context.Context) IRoleMenusDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IRoleMenusDo
	WriteDB() IRoleMenusDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IRoleMenusDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IRoleMenusDo
	Not(conds ...gen.Condition) IRoleMenusDo
	Or(conds ...gen.Condition) IRoleMenusDo
	Select(conds ...field.Expr) IRoleMenusDo
	Where(conds ...gen.Condition) IRoleMenusDo
	Order(conds ...field.Expr) IRoleMenusDo
	Distinct(cols ...field.Expr) IRoleMenusDo
	Omit(cols ...field.Expr) IRoleMenusDo
	Join(table schema.Tabler, on ...field.Expr) IRoleMenusDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IRoleMenusDo
	RightJoin(table schema.Tabler, on ...field.Expr) IRoleMenusDo
	Group(cols ...field.Expr) IRoleMenusDo
	Having(conds ...gen.Condition) IRoleMenusDo
	Limit(limit int) IRoleMenusDo
	Offset(offset int) IRoleMenusDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleMenusDo
	Unscoped() IRoleMenusDo
	Create(values ...*model.RoleMenus) error
	CreateInBatches(values []*model.RoleMenus, batchSize int) error
	Save(values ...*model.RoleMenus) error
	First() (*model.RoleMenus, error)
	Take() (*model.RoleMenus, error)
	Last() (*model.RoleMenus, error)
	Find() ([]*model.RoleMenus, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleMenus, err error)
	FindInBatches(result *[]*model.RoleMenus, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.RoleMenus) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IRoleMenusDo
	Assign(attrs ...field.AssignExpr) IRoleMenusDo
	Joins(fields ...field.RelationField) IRoleMenusDo
	Preload(fields ...field.RelationField) IRoleMenusDo
	FirstOrInit() (*model.RoleMenus, error)
	FirstOrCreate() (*model.RoleMenus, error)
	FindByPage(offset int, limit int) (result []*model.RoleMenus, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IRoleMenusDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (r roleMenusDo) Debug() IRoleMenusDo {
	return r.withDO(r.DO.Debug())
}

func (r roleMenusDo) WithContext(ctx context.Context) IRoleMenusDo {
	return r.withDO(r.DO.WithContext(ctx))
}

func (r roleMenusDo) ReadDB() IRoleMenusDo {
	return r.Clauses(dbresolver.Read)
}

func (r roleMenusDo) WriteDB() IRoleMenusDo {
	return r.Clauses(dbresolver.Write)
}

func (r roleMenusDo) Session(config *gorm.Session) IRoleMenusDo {
	return r.withDO(r.DO.Session(config))
}

func (r roleMenusDo) Clauses(conds ...clause.Expression) IRoleMenusDo {
	return r.withDO(r.DO.Clauses(conds...))
}

func (r roleMenusDo) Returning(value interface{}, columns ...string) IRoleMenusDo {
	return r.withDO(r.DO.Returning(value, columns...))
}

func (r roleMenusDo) Not(conds ...gen.Condition) IRoleMenusDo {
	return r.withDO(r.DO.Not(conds...))
}

func (r roleMenusDo) Or(conds ...gen.Condition) IRoleMenusDo {
	return r.withDO(r.DO.Or(conds...))
}

func (r roleMenusDo) Select(conds ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.Select(conds...))
}

func (r roleMenusDo) Where(conds ...gen.Condition) IRoleMenusDo {
	return r.withDO(r.DO.Where(conds...))
}

func (r roleMenusDo) Order(conds ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.Order(conds...))
}

func (r roleMenusDo) Distinct(cols ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.Distinct(cols...))
}

func (r roleMenusDo) Omit(cols ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.Omit(cols...))
}

func (r roleMenusDo) Join(table schema.Tabler, on ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.Join(table, on...))
}

func (r roleMenusDo) LeftJoin(table schema.Tabler, on ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.LeftJoin(table, on...))
}

func (r roleMenusDo) RightJoin(table schema.Tabler, on ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.RightJoin(table, on...))
}

func (r roleMenusDo) Group(cols ...field.Expr) IRoleMenusDo {
	return r.withDO(r.DO.Group(cols...))
}

func (r roleMenusDo) Having(conds ...gen.Condition) IRoleMenusDo {
	return r.withDO(r.DO.Having(conds...))
}

func (r roleMenusDo) Limit(limit int) IRoleMenusDo {
	return r.withDO(r.DO.Limit(limit))
}

func (r roleMenusDo) Offset(offset int) IRoleMenusDo {
	return r.withDO(r.DO.Offset(offset))
}

func (r roleMenusDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IRoleMenusDo {
	return r.withDO(r.DO.Scopes(funcs...))
}

func (r roleMenusDo) Unscoped() IRoleMenusDo {
	return r.withDO(r.DO.Unscoped())
}

func (r roleMenusDo) Create(values ...*model.RoleMenus) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Create(values)
}

func (r roleMenusDo) CreateInBatches(values []*model.RoleMenus, batchSize int) error {
	return r.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (r roleMenusDo) Save(values ...*model.RoleMenus) error {
	if len(values) == 0 {
		return nil
	}
	return r.DO.Save(values)
}

func (r roleMenusDo) First() (*model.RoleMenus, error) {
	if result, err := r.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenus), nil
	}
}

func (r roleMenusDo) Take() (*model.RoleMenus, error) {
	if result, err := r.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenus), nil
	}
}

func (r roleMenusDo) Last() (*model.RoleMenus, error) {
	if result, err := r.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenus), nil
	}
}

func (r roleMenusDo) Find() ([]*model.RoleMenus, error) {
	result, err := r.DO.Find()
	return result.([]*model.RoleMenus), err
}

func (r roleMenusDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.RoleMenus, err error) {
	buf := make([]*model.RoleMenus, 0, batchSize)
	err = r.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (r roleMenusDo) FindInBatches(result *[]*model.RoleMenus, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return r.DO.FindInBatches(result, batchSize, fc)
}

func (r roleMenusDo) Attrs(attrs ...field.AssignExpr) IRoleMenusDo {
	return r.withDO(r.DO.Attrs(attrs...))
}

func (r roleMenusDo) Assign(attrs ...field.AssignExpr) IRoleMenusDo {
	return r.withDO(r.DO.Assign(attrs...))
}

func (r roleMenusDo) Joins(fields ...field.RelationField) IRoleMenusDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Joins(_f))
	}
	return &r
}

func (r roleMenusDo) Preload(fields ...field.RelationField) IRoleMenusDo {
	for _, _f := range fields {
		r = *r.withDO(r.DO.Preload(_f))
	}
	return &r
}

func (r roleMenusDo) FirstOrInit() (*model.RoleMenus, error) {
	if result, err := r.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenus), nil
	}
}

func (r roleMenusDo) FirstOrCreate() (*model.RoleMenus, error) {
	if result, err := r.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.RoleMenus), nil
	}
}

func (r roleMenusDo) FindByPage(offset int, limit int) (result []*model.RoleMenus, count int64, err error) {
	result, err = r.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = r.Offset(-1).Limit(-1).Count()
	return
}

func (r roleMenusDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = r.Count()
	if err != nil {
		return
	}

	err = r.Offset(offset).Limit(limit).Scan(result)
	return
}

func (r roleMenusDo) Scan(result interface{}) (err error) {
	return r.DO.Scan(result)
}

func (r roleMenusDo) Delete(models ...*model.RoleMenus) (result gen.ResultInfo, err error) {
	return r.DO.Delete(models)
}

func (r *roleMenusDo) withDO(do gen.Dao) *roleMenusDo {
	r.DO = *do.(*gen.DO)
	return r
}
