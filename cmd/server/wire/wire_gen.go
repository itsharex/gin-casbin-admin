// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
	"github.com/wxlbd/nunu-casbin-admin/internal/handler"
	"github.com/wxlbd/nunu-casbin-admin/internal/repository"
	"github.com/wxlbd/nunu-casbin-admin/internal/server"
	"github.com/wxlbd/nunu-casbin-admin/internal/service"
	"github.com/wxlbd/nunu-casbin-admin/pkg/config"
	"github.com/wxlbd/nunu-casbin-admin/pkg/gormx"
	"github.com/wxlbd/nunu-casbin-admin/pkg/log"
	"github.com/wxlbd/nunu-casbin-admin/pkg/redisx"
)

// Injectors from wire.go:

func NewWire(configConfig *config.Config, logger *log.Logger) (*gin.Engine, func(), error) {
	db := gormx.NewDB(configConfig, logger)
	repositoryRepository := repository.NewRepository(db)
	client, err := redisx.New(configConfig)
	if err != nil {
		return nil, nil, err
	}
	serviceService, err := service.NewService(repositoryRepository, configConfig, client)
	if err != nil {
		return nil, nil, err
	}
	handlerHandler := handler.NewHandler(serviceService)
	engine := server.NewServerHTTP(configConfig, logger, handlerHandler)
	return engine, func() {
	}, nil
}

// wire.go:

var ServerSet = wire.NewSet(server.NewServerHTTP)

var RepositorySet = wire.NewSet(repository.NewRepository)

var ServiceSet = wire.NewSet(service.NewService)

var HandlerSet = wire.NewSet(handler.NewHandler)
